name: CI

on:
  push:
    branches:
      - main
  pull_request:

permissions:
  actions: read
  contents: read
  packages: write

jobs:
  lint:
    name: Lint code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: 20.19.0
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - uses: nrwl/nx-set-shas@v4

      - name: Lint
        run: npx nx affected -t lint

      - name: Check format
        run: npx nx format:check

  test:
    name: Run tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: 20.19.0
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - uses: nrwl/nx-set-shas@v4

      - name: Run unit tests
        run: npx nx affected -t test

      - name: Generate coverage report
        run: npx nx affected -t test --coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage/lcov.info
          fail_ci_if_error: false

  build:
    name: Build applications
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: 20.19.0
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - uses: nrwl/nx-set-shas@v4

      - name: Build affected apps
        run: npx nx affected -t build --exclude=mobile

      - name: Archive build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/
          retention-days: 7

  e2e:
    name: End-to-end tests
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: 20.19.0
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - uses: nrwl/nx-set-shas@v4

      - name: Install Playwright browsers
        run: npx playwright install chromium

      - name: Install Playwright dependencies
        run: npx playwright install-deps

      - name: Run E2E tests
        run: npx nx affected -t e2e

  docker:
    name: Build and push Docker images
    needs: [build, e2e]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}/api
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,format=long
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}

      - name: Build and push API image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/api/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  notify:
    name: Notify on success
    needs: docker
    if: success() && github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Send Slack notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: deployments
          SLACK_COLOR: good
          SLACK_TITLE: New Kanora API version deployed
          SLACK_MESSAGE: 'A new version of Kanora API has been built and published to GitHub Container Registry!'
